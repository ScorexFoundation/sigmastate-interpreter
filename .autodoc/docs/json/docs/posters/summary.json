{
  "folderName": "posters",
  "folderPath": ".autodoc/docs/json/docs/posters",
  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/.autodoc/docs/json/docs/posters",
  "files": [
    {
      "fileName": "poster.tex",
      "filePath": "docs/posters/poster.tex",
      "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/docs/posters/poster.tex",
      "summary": "This code is a LaTeX document that describes a new scripting language called ErgoScript, which is designed to be a more expressive alternative to Bitcoin Script. Bitcoin Script is a stack-based language that is used to protect every coin in the Bitcoin network. However, its abilities are limited due to security issues, and it requires a hard-fork to add new cryptographic primitives to the language.\n\nErgoScript is designed as a call-by-value, higher-order functional language without recursion, with concise Scala/Kotlin syntax. It supports single-assignment blocks, tuples, optional values, indexed collections with higher-order operations, short-cutting logicals, ternary 'if' with lazy branches. All operations are deterministic, without side effects, and all values are immutable. ErgoScript is not Turing-complete, but it is expressive enough to make the whole transactional model of Ergo Turing complete.\n\nErgoScript defines a guarding proposition for a coin as a logic formula that combines predicates over a context and cryptographic statements provable via $\\Sigma$-protocols with AND, OR, k-out-of-n connectives. A user willing to spend the coin first evaluates the proposition over known context and entire spending transaction yielding a $\\Sigma$-protocol statement. Then the prover turns the statement into a signature with the help of a Fiat-Shamir transformation. A transaction verifier (a full-node in a blockchain setting) evaluates the proposition against the context and checks the signature. Language expressiveness is defined by a set of predicates over context and a set of $\\Sigma$-protocol statements.\n\nThe document provides several examples of how ErgoScript can be used, including zero-knowledge ring and threshold signatures, pre-issued mining rewards, crowd-funding, demurrage currency, DEX, LETS, ICO, non-interactive CoinJoin, etc. The document also discusses how the language can be extended with a soft-fork using versioning conventions.\n\nOverall, this code is an important part of the larger project of developing a more expressive scripting language for cryptocurrencies. It provides a detailed technical explanation of ErgoScript and its capabilities, as well as examples of how it can be used in practice.",
      "questions": "1. What is the purpose of ErgoScript and how does it differ from Bitcoin Script?\n   \n   ErgoScript is a more expressive alternative to Bitcoin Script, designed as a call-by-value, higher-order functional language without recursion. It supports single-assignment blocks, tuples, optional values, indexed collections with higher-order operations, short-cutting logicals, ternary 'if' with lazy branches. All operations are deterministic, without side effects and all values are immutable. ErgoScript is not turing-complete, however it is expressive enough to make the whole transactional model of Ergo turing complete.\n\n2. How does ErgoScript define a guarding proposition for a coin and how is it evaluated?\n   \n   ErgoScript defines a guarding proposition for a coin as a logic formula which combines predicates over a context and cryptographic statements provable via $\\Sigma$-protocols with AND, OR, k-out-of-n connectives. A user willing to spend the coin first evaluates the proposition over known context and entire spending transaction yielding a $\\Sigma$-protocol statement. Then the prover is turning the statement into a signature with the help of a Fiat-Shamir transformation. A transaction verifier (a full-node in a blockchain setting) evaluates the proposition against the context and checks the signature.\n\n3. What are some examples of use cases for ErgoScript?\n   \n   ErgoScript can be used for zero knowledge ring and threshold signatures, pre-issued mining rewards, crowd-funding, demurrage currency, DEX, LETS, ICO, non-interactive CoinJoin, etc."
    },
    {
      "fileName": "sources.bib",
      "filePath": "docs/posters/sources.bib",
      "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/docs/posters/sources.bib",
      "summary": "This code is a collection of bibliographic references for a project related to blockchain technology, specifically focusing on the Bitcoin protocol and its various aspects such as security, consensus mechanisms, and cryptographic techniques. The references include research papers, conference proceedings, and online resources that discuss various topics related to the project.\n\nSome of the key topics covered in these references include:\n\n1. The Bitcoin Backbone Protocol: This protocol forms the foundation of the Bitcoin network and is responsible for maintaining the blockchain, a public ledger of all transactions. The reference by Garay et al. provides an analysis and applications of this protocol.\n\n2. Zero-Knowledge Proofs: These are cryptographic techniques that allow one party to prove to another that they know a specific piece of information without revealing the information itself. The references by Meiklejohn et al., Groth et al., and Ben-Sasson et al. discuss different aspects of zero-knowledge proofs and their applications in cryptocurrencies.\n\n3. Proof-of-Work and Proof-of-Stake: These are consensus mechanisms used in blockchain networks to validate transactions and maintain the integrity of the blockchain. The references by King et al., Kiayias et al., and Bentov et al. discuss various aspects of these mechanisms and their implications for the security and scalability of blockchain networks.\n\n4. Anonymity and Privacy: One of the key features of cryptocurrencies like Bitcoin is the ability to conduct transactions anonymously. The references by Saxena et al., Miers et al., and Sasson et al. discuss various techniques for enhancing anonymity and privacy in blockchain networks.\n\n5. Scalability and Performance: As the number of users and transactions in a blockchain network grows, it becomes increasingly important to ensure that the network can scale and maintain its performance. The references by Eyal et al., Sompolinsky et al., and Croman et al. discuss various approaches to improving the scalability and performance of blockchain networks.\n\nThese references provide a comprehensive overview of the various aspects of blockchain technology and can be used as a starting point for further research and development in this area.",
      "questions": "1. **What is the purpose of this code?**\n\n   This code is not a functional code, but rather a collection of bibliography entries in BibTeX format. These entries are related to various research papers and articles on topics such as Bitcoin, blockchain, cryptographic techniques, and zero-knowledge proofs.\n\n2. **How can I use this code in my project?**\n\n   You can use this code as a reference list for your project if you are working on a topic related to cryptocurrencies, blockchain, or cryptography. You can import this BibTeX file into your reference management software (e.g., Zotero, Mendeley, or EndNote) and use it to cite the relevant papers in your project documentation or research paper.\n\n3. **Are there any dependencies or requirements to use this code?**\n\n   There are no dependencies or requirements to use this code directly. However, to effectively use the bibliography entries in your project, you will need a reference management software that supports BibTeX format, as well as a document preparation system like LaTeX that can process the citations and generate a bibliography."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/docs/posters` folder contains two files related to the ErgoScript project, which aims to develop a more expressive scripting language for cryptocurrencies as an alternative to Bitcoin Script.\n\n### poster.tex\n\nThis LaTeX document provides a detailed technical explanation of ErgoScript, a call-by-value, higher-order functional language without recursion. ErgoScript is designed with concise Scala/Kotlin syntax and supports various features such as single-assignment blocks, tuples, optional values, indexed collections with higher-order operations, short-cutting logicals, and ternary 'if' with lazy branches.\n\nThe document explains how ErgoScript defines a guarding proposition for a coin as a logic formula that combines predicates over a context and cryptographic statements provable via $\\Sigma$-protocols with AND, OR, k-out-of-n connectives. It also describes the process of spending a coin and verifying a transaction using ErgoScript.\n\nSeveral examples of ErgoScript applications are provided, including:\n\n- Zero-knowledge ring and threshold signatures\n- Pre-issued mining rewards\n- Crowd-funding\n- Demurrage currency\n- Decentralized exchange (DEX)\n- Local Exchange Trading System (LETS)\n- Initial Coin Offering (ICO)\n- Non-interactive CoinJoin\n\nThe document also discusses how ErgoScript can be extended with a soft-fork using versioning conventions.\n\n### sources.bib\n\nThis file contains a collection of bibliographic references related to blockchain technology, focusing on the Bitcoin protocol, security, consensus mechanisms, and cryptographic techniques. These references cover key topics such as the Bitcoin Backbone Protocol, zero-knowledge proofs, proof-of-work and proof-of-stake, anonymity and privacy, and scalability and performance.\n\nDevelopers working on the ErgoScript project can use these references as a starting point for further research and development in the field of blockchain technology and cryptocurrencies.\n\nIn summary, the `.autodoc/docs/json/docs/posters` folder contains essential documentation and references for the ErgoScript project. The `poster.tex` file provides a comprehensive technical explanation of ErgoScript and its capabilities, while the `sources.bib` file offers a collection of relevant bibliographic references for further research and development.",
  "questions": ""
}