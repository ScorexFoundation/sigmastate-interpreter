{
  "fileName": "evaluation.tex",
  "filePath": "docs/spec/evaluation.tex",
  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/docs/spec/evaluation.tex",
  "summary": "The code is a specification of the evaluation semantics of a language called \\langname. The evaluation of \\langname is defined by translating it to another language called \\corelang, which is a subset of \\langname. The typing rules of \\corelang are a subset of the typing rules of \\langname. \n\nThe evaluation semantics of \\corelang is based on call-by-value (CBV) lambda calculus and is specified using denotational semantics. The denotational semantics is organized around the denotations of types, contexts, and terms. Each type in \\corelang denotes a set of values, and each context denotes a set of bindings for identifiers. A term in \\corelang denotes a function from the set of bindings to a value. \n\nThe code defines a set of CBV terms called values, which include variables, constructors, and lambda abstractions. All other CBV terms are called producers because they produce a value when evaluated. \n\nThe denotations of types and terms are given in Figure~\\ref{fig:denotations}. The denotations of types include \\lst{Boolean}, pre-defined types, product types, and function types. The denotations of terms include variables, constructors, tuples, function applications, and method invocations. \n\nOverall, this code provides a formal specification of the evaluation semantics of \\corelang, which is used to evaluate \\langname. This specification is important for ensuring that the language is well-defined and behaves as expected. It also provides a basis for implementing interpreters and compilers for the language.",
  "questions": "1. What is the difference between the typing rules of \\langname and \\corelang?\n- The typing rules of \\corelang form a subset of the typing rules of \\langname, as \\corelang is a subset of \\langname.\n\n2. What is the principle behind the denotational semantics of \\corelang?\n- The principle behind the denotational semantics of \\corelang is that each type denotes a set whose elements are the denotations of values of that type.\n\n3. How are contexts and environments related in the denotational semantics of \\corelang?\n- A context is a finite sequence of identifiers with value types, while an environment is a list of bindings for identifiers that associates each identifier with a value of its corresponding type. The environment denotes an element of the set represented by the context."
}