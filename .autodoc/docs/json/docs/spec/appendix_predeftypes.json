{
  "fileName": "appendix_predeftypes.tex",
  "filePath": "docs/spec/appendix_predeftypes.tex",
  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/docs/spec/appendix_predeftypes.tex",
  "summary": "This code defines the predefined types used in the \\langname programming language. The table in the code lists the names, codes, and properties of each predefined type. The properties include whether the type is a constant size, whether it is a primitive type, whether it is an embedded type, whether it is a number, and the set of values it can hold. \n\nThe code then goes on to provide autogenerated subsections for each predefined type. Each subsection provides a description of the type and the methods that can be called on it. \n\nFor example, the Boolean type subsection describes the Boolean type and provides a list of methods that can be called on it, such as `and`, `or`, and `not`. Similarly, the SigmaProp type subsection describes the SigmaProp type, which holds sigma propositions that can be proved and verified using Sigma protocols. The subsection provides a list of methods that can be called on SigmaProp instances, such as `and`, `or`, and `threshold`. \n\nOverall, this code provides a comprehensive list of the predefined types used in the \\langname programming language and their associated methods. This information is useful for developers who are working with \\langname and need to understand the properties and capabilities of each type.",
  "questions": "1. What is the purpose of this code file?\n    \n    This code file defines the predefined types of a programming language called \\langname and provides autogenerated subsections for each type descriptor.\n\n2. What are some examples of predefined types in \\langname?\n    \n    Some examples of predefined types in \\langname include Boolean, Byte, Short, Int, Long, BigInt, GroupElement, SigmaProp, Box, AvlTree, Header, PreHeader, Context, Global, Coll, and Option.\n\n3. What is the abstract syntax of sigma propositions in \\langname?\n    \n    The abstract syntax of sigma propositions in \\langname is defined as a well-formed tree of sigma propositions, where each node represents a sigma protocol primitive or connective, such as TrivialProp, ProveDLog, ProveDHTuple, THRESHOLD, OR, and AND."
}