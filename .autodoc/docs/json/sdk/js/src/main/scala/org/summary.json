{
  "folderName": "org",
  "folderPath": ".autodoc/docs/json/sdk/js/src/main/scala/org",
  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/.autodoc/docs/json/sdk/js/src/main/scala/org",
  "files": [],
  "folders": [
    {
      "folderName": "ergoplatform",
      "folderPath": ".autodoc/docs/json/sdk/js/src/main/scala/org/ergoplatform",
      "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/.autodoc/docs/json/sdk/js/src/main/scala/org/ergoplatform",
      "files": [],
      "folders": [
        {
          "folderName": "sdk",
          "folderPath": ".autodoc/docs/json/sdk/js/src/main/scala/org/ergoplatform/sdk",
          "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/.autodoc/docs/json/sdk/js/src/main/scala/org/ergoplatform/sdk",
          "files": [],
          "folders": [
            {
              "folderName": "js",
              "folderPath": ".autodoc/docs/json/sdk/js/src/main/scala/org/ergoplatform/sdk/js",
              "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/.autodoc/docs/json/sdk/js/src/main/scala/org/ergoplatform/sdk/js",
              "files": [
                {
                  "fileName": "BlockchainParameters.scala",
                  "filePath": "sdk/js/src/main/scala/org/ergoplatform/sdk/js/BlockchainParameters.scala",
                  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/sdk/js/src/main/scala/org/ergoplatform/sdk/js/BlockchainParameters.scala",
                  "summary": "The code defines a class called \"BlockchainParameters\" which extends the \"ErgoLikeParameters\" class. This class is used to represent the parameters of a blockchain network. The class has several properties such as \"storageFeeFactor\", \"minValuePerByte\", \"maxBlockSize\", \"tokenAccessCost\", \"inputCost\", \"dataInputCost\", \"outputCost\", \"maxBlockCost\", \"_softForkStartingHeight\", \"_softForkVotesCollected\", and \"blockVersion\". These properties are used to define the various parameters of the blockchain network.\n\nThe class also has two methods called \"softForkStartingHeight\" and \"softForkVotesCollected\". These methods are used to retrieve the soft-fork starting height and the votes for soft-fork collected in previous epochs respectively. The methods use the \"Isos.isoUndefOr\" method to convert the \"UndefOr\" type to an \"Option\" type.\n\nThe class is annotated with \"@JSExportTopLevel\" which means that it can be exported to JavaScript. This allows the class to be used in a JavaScript environment.\n\nThis class can be used in the larger project to define the parameters of the blockchain network. For example, the \"maxBlockSize\" property can be used to define the maximum size of a block in the blockchain network. The \"inputCost\" property can be used to define the cost of adding an input to a transaction. The \"outputCost\" property can be used to define the cost of adding an output to a transaction. The \"softForkStartingHeight\" and \"softForkVotesCollected\" methods can be used to retrieve information about the soft-fork starting height and the votes for soft-fork collected in previous epochs respectively.\n\nExample usage:\n\n```\nval params = new BlockchainParameters(\n  storageFeeFactor = 100,\n  minValuePerByte = 1,\n  maxBlockSize = 1000000,\n  tokenAccessCost = 10,\n  inputCost = 100,\n  dataInputCost = 50,\n  outputCost = 50,\n  maxBlockCost = 100000000,\n  _softForkStartingHeight = Some(100),\n  _softForkVotesCollected = Some(100),\n  blockVersion = 1\n)\n\nval maxBlockSize = params.maxBlockSize // returns 1000000\nval softForkStartingHeight = params.softForkStartingHeight // returns Some(100)\n```",
                  "questions": "1. What is the purpose of this code and what does it do?\n   This code defines a class called `BlockchainParameters` that extends `ErgoLikeParameters` and contains various parameters related to the blockchain, such as storage fee factor and max block size.\n\n2. What is the significance of the `@JSExportTopLevel` annotation?\n   The `@JSExportTopLevel` annotation is used to export the `BlockchainParameters` class as a top-level object in the generated JavaScript code, making it accessible from outside the module.\n\n3. What is the role of the `Isos` object and how is it used in this code?\n   The `Isos` object provides isomorphisms (bi-directional transformations) between different types, and is used in this code to convert between `UndefOr[Int]` and `Option[Int]` types for the `softForkStartingHeight` and `softForkVotesCollected` methods."
                },
                {
                  "fileName": "BlockchainStateContext.scala",
                  "filePath": "sdk/js/src/main/scala/org/ergoplatform/sdk/js/BlockchainStateContext.scala",
                  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/sdk/js/src/main/scala/org/ergoplatform/sdk/js/BlockchainStateContext.scala",
                  "summary": "The code above defines a class called \"BlockchainStateContext\" that is exported as a top-level object for use in a JavaScript environment. This class is part of the Ergo Platform SDK and is used to represent the current state of the blockchain.\n\nThe class has three properties: \"sigmaLastHeaders\", \"previousStateDigest\", and \"sigmaPreHeader\". \"sigmaLastHeaders\" is an array of \"Header\" objects, which represent the headers of the most recent blocks in the blockchain. \"previousStateDigest\" is a string that represents the hash of the previous state of the blockchain. \"sigmaPreHeader\" is an object of type \"PreHeader\" that contains information about the current block being processed.\n\nThis class is likely used in the larger project to provide a way to access and manipulate the current state of the blockchain. For example, a developer may use this class to retrieve the most recent block headers and use that information to make decisions about how to interact with the blockchain. \n\nHere is an example of how this class might be used in a JavaScript environment:\n\n```javascript\nconst context = new BlockchainStateContext(headers, previousDigest, preHeader);\nconsole.log(context.sigmaLastHeaders); // prints array of Header objects\nconsole.log(context.previousStateDigest); // prints string representing previous state hash\nconsole.log(context.sigmaPreHeader); // prints PreHeader object\n```\n\nOverall, this class provides a useful abstraction for working with the current state of the blockchain in a JavaScript environment.",
                  "questions": "1. What is the purpose of this code and how does it fit into the overall project?\n- This code defines a class called `BlockchainStateContext` in the `org.ergoplatform.sdk.js` package, which appears to be related to blockchain technology. It is likely used to store and manage data related to the state of the blockchain.\n\n2. What is the significance of the `@JSExportTopLevel` annotation?\n- The `@JSExportTopLevel` annotation is used to export the `BlockchainStateContext` class as a top-level object in the generated JavaScript code. This allows it to be accessed and used by other JavaScript code.\n\n3. What are the types and meanings of the parameters passed to the `BlockchainStateContext` constructor?\n- The `BlockchainStateContext` constructor takes three parameters: an array of `Header` objects called `sigmaLastHeaders`, a `String` called `previousStateDigest`, and a `PreHeader` object called `sigmaPreHeader`. These parameters likely contain information about the state of the blockchain, such as previous block headers and the current state digest."
                },
                {
                  "fileName": "ErgoTree.scala",
                  "filePath": "sdk/js/src/main/scala/org/ergoplatform/sdk/js/ErgoTree.scala",
                  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/sdk/js/src/main/scala/org/ergoplatform/sdk/js/ErgoTree.scala",
                  "summary": "The code above is a Scala.js implementation of the ErgoTree serialization and deserialization process. ErgoTree is a data structure used in the Ergo blockchain platform to represent smart contracts. The purpose of this code is to provide a way to convert ErgoTree objects to and from bytes and hexadecimal strings.\n\nThe `ErgoTree` class is defined as a Scala.js object that takes an `ErgoTree` object as a parameter. It has two methods: `toBytes()` and `toHex()`. The `toBytes()` method serializes the `ErgoTree` object using the `ErgoTreeSerializer` and returns the resulting byte array. The `toHex()` method encodes the byte array returned by `toBytes()` into a hexadecimal string using the `Base16` encoding scheme.\n\nThe `ErgoTrees` object is defined as a Scala.js object that provides two methods: `fromHex()` and `fromBytes()`. The `fromHex()` method takes a hexadecimal string as a parameter, decodes it using the `Base16` encoding scheme, and returns an `ErgoTree` object by calling the `fromBytes()` method. The `fromBytes()` method takes a byte array as a parameter, deserializes it using the `ErgoTreeSerializer`, and returns a new `ErgoTree` object.\n\nThis code can be used in the larger project to facilitate the serialization and deserialization of ErgoTree objects. For example, if the project involves creating and executing smart contracts on the Ergo blockchain platform, this code can be used to convert the smart contract code into an `ErgoTree` object, which can then be stored on the blockchain. Later, when the smart contract needs to be executed, the `ErgoTree` object can be retrieved from the blockchain and deserialized back into the original smart contract code using the `fromBytes()` method. Overall, this code provides a convenient way to work with ErgoTree objects in a Scala.js environment.",
                  "questions": "1. What is the purpose of this code and what does it do?\n   - This code defines a JavaScript class and object for working with ErgoTrees, which are data structures used in the Ergo blockchain platform. It provides methods for converting ErgoTrees to bytes and hex strings, as well as for deserializing ErgoTrees from bytes or hex strings.\n   \n2. What is the significance of the `@JSExport` and `@JSExportTopLevel` annotations?\n   - These annotations are used to export the ErgoTree class and object to the top-level scope of a JavaScript environment, making them accessible to other JavaScript code. `@JSExport` is used to export individual methods, while `@JSExportTopLevel` is used to export entire objects or classes.\n   \n3. What is the purpose of the `Base16` and `ErgoTreeSerializer` classes?\n   - The `Base16` class provides methods for encoding and decoding data in hexadecimal format, which is commonly used in blockchain applications. The `ErgoTreeSerializer` class provides methods for serializing and deserializing ErgoTrees, which are complex data structures used in the Ergo blockchain platform."
                },
                {
                  "fileName": "Header.scala",
                  "filePath": "sdk/js/src/main/scala/org/ergoplatform/sdk/js/Header.scala",
                  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/sdk/js/src/main/scala/org/ergoplatform/sdk/js/Header.scala",
                  "summary": "This code defines two classes, AvlTree and Header, which are used in the larger project to represent certain data structures. \n\nThe AvlTree class represents an AVL tree, a self-balancing binary search tree. It takes in several parameters, including the tree's digest, which is a unique identifier for the tree, and whether insertions, updates, and removals are allowed. The keyLength parameter specifies the length of the keys in the tree, while valueLengthOpt is an optional parameter that specifies the length of the values associated with the keys. This class is exported as a top-level object, meaning it can be accessed from other parts of the project.\n\nThe Header class represents a block header in the Ergo blockchain. It takes in several parameters, including the block's ID, version, and parent ID, as well as various other pieces of information such as the root of the authenticated data structure (ADProofsRoot), the root of the state tree (represented by an instance of the AvlTree class), and the root of the transaction tree. The class also includes information about the block's timestamp, difficulty (nBits), height, and various cryptographic keys and nonces. This class is also exported as a top-level object.\n\nThese classes are likely used throughout the project to represent and manipulate AVL trees and block headers. For example, the AvlTree class may be used to create and modify AVL trees in the Ergo blockchain, while the Header class may be used to represent and validate block headers. Other parts of the project may interact with these classes to perform various operations on the data they represent.",
                  "questions": "1. What is the purpose of the `AvlTree` and `Header` classes?\n- The `AvlTree` class represents an AVL tree data structure with specific properties, while the `Header` class represents a block header in the Ergo blockchain.\n\n2. What is the significance of the `JSExportTopLevel` annotation?\n- The `JSExportTopLevel` annotation is used to export a class or object to the top level of the generated JavaScript code, making it accessible from outside the module.\n\n3. What is the role of the `special.sigma` import?\n- The `special.sigma` import provides access to the special types and functions used in the ErgoScript language, which is used for writing smart contracts on the Ergo blockchain."
                },
                {
                  "fileName": "Isos.scala",
                  "filePath": "sdk/js/src/main/scala/org/ergoplatform/sdk/js/Isos.scala",
                  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/sdk/js/src/main/scala/org/ergoplatform/sdk/js/Isos.scala",
                  "summary": "This code is part of the Ergo Platform SDK and provides a set of isomorphisms (Isos) between JavaScript and Scala data structures. These Isos are used to convert data between the two languages, allowing seamless integration of the Ergo Platform SDK with JavaScript applications.\n\nThe `Isos` object contains several implicit `Iso` instances for various data types, such as `Value`, `Constant`, `AvlTree`, `Header`, `PreHeader`, `BlockchainStateContext`, `ContextExtension`, `UnsignedInput`, `DataInput`, `BigInt`, `Amount`, `Token`, and others. Each `Iso` instance defines a `to` and a `from` method for converting between the JavaScript and Scala data structures.\n\nFor example, the `isoValueToConstant` instance converts between JavaScript `Value` and Scala `Constant[SType]`:\n\n```scala\nimplicit val isoValueToConstant: Iso[Value, Constant[SType]] = new Iso[Value, Constant[SType]] {\n  override def to(x: Value): Constant[SType] = ...\n  override def from(x: Constant[SType]): Value = ...\n}\n```\n\nAdditionally, there are utility methods for converting between collections, such as `isoArrayToColl`, `isoArrayToIndexed`, and `isoTokenArray`.\n\nThe `isoUnsignedTransaction` instance is particularly important, as it converts between `UnsignedTransaction` and `UnsignedErgoLikeTransaction`. This allows JavaScript applications to create and manipulate unsigned transactions before submitting them to the Ergo network.\n\n```scala\nval isoUnsignedTransaction: Iso[UnsignedTransaction, UnsignedErgoLikeTransaction] =\n  new Iso[UnsignedTransaction, UnsignedErgoLikeTransaction] {\n    override def to(a: UnsignedTransaction): UnsignedErgoLikeTransaction = ...\n    override def from(b: UnsignedErgoLikeTransaction): UnsignedTransaction = ...\n  }\n```\n\nIn summary, this code provides a set of isomorphisms for converting between JavaScript and Scala data structures, enabling seamless integration of the Ergo Platform SDK with JavaScript applications.",
                  "questions": "1. **Question**: What is the purpose of the `Isos` object in this code?\n   **Answer**: The `Isos` object contains a collection of implicit and explicit `Iso` instances, which are used to convert between different types, specifically between JavaScript and Scala types. These conversions are necessary for interoperability between the two languages in this project.\n\n2. **Question**: How does the `isoUnsignedTransaction` Iso work?\n   **Answer**: The `isoUnsignedTransaction` Iso is an implementation of the Iso type class that converts between `UnsignedTransaction` and `UnsignedErgoLikeTransaction` types. It provides `to` and `from` methods for converting between these types by mapping their respective fields using other Isos defined in the `Isos` object.\n\n3. **Question**: What is the role of the `isoBox` Iso in this code?\n   **Answer**: The `isoBox` Iso is used to convert between `Box[commonMod.Amount]` and `ErgoBox` types. It provides `to` and `from` methods for converting between these types by mapping their respective fields using other Isos defined in the `Isos` object. This Iso is particularly useful for converting between JavaScript and Scala representations of boxes in the Ergo platform."
                },
                {
                  "fileName": "PreHeader.scala",
                  "filePath": "sdk/js/src/main/scala/org/ergoplatform/sdk/js/PreHeader.scala",
                  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/sdk/js/src/main/scala/org/ergoplatform/sdk/js/PreHeader.scala",
                  "summary": "The code above defines a class called `PreHeader` in the `org.ergoplatform.sdk.js` package. This class is intended to represent a pre-header of a block in the Ergo blockchain. \n\nThe `PreHeader` class has seven properties: `version`, `parentId`, `timestamp`, `nBits`, `height`, `minerPk`, and `votes`. These properties are all immutable and are set through the constructor. \n\nThe `version` property is a single byte that represents the version of the pre-header. The `parentId` property is a string that represents the ID of the parent block. The `timestamp` property is a `BigInt` that represents the timestamp of the block. The `nBits` property is a `BigInt` that represents the difficulty of the block. The `height` property is an integer that represents the height of the block. The `minerPk` property is a string that represents the public key of the miner who mined the block. The `votes` property is a string that represents the votes that were cast for the block. \n\nThe `PreHeader` class is annotated with `@JSExportTopLevel`, which means that it can be exported to JavaScript code. This is useful for integrating the Ergo blockchain with JavaScript applications. \n\nIn the larger project, the `PreHeader` class can be used to represent pre-headers of blocks in the Ergo blockchain. This can be useful for analyzing the blockchain and performing various operations on it. For example, one could use the `PreHeader` class to calculate the difficulty of a block or to determine the public key of the miner who mined the block. \n\nHere is an example of how the `PreHeader` class could be used in JavaScript code:\n\n```javascript\nconst preHeader = new PreHeader(\n  1, // version\n  \"0000000000000000000000000000000000000000000000000000000000000000\", // parent ID\n  BigInt(1630460000), // timestamp\n  BigInt(100000000), // difficulty\n  12345, // height\n  \"03a7f8c7d9d9c8f7a6d5c4b3a2f1e0d9c8b7a6d5c4b3a2f1e0d9c8b7a6d5c4b3\", // miner public key\n  \"0101010101010101010101010101010101010101010101010101010101010101\" // votes\n);\n\nconsole.log(preHeader.height); // Output: 12345\n```",
                  "questions": "1. What is the purpose of this code?\n   This code defines a class called PreHeader in the org.ergoplatform.sdk.js package, which has several properties related to a blockchain header.\n\n2. What is the significance of the JSExportTopLevel annotation?\n   The JSExportTopLevel annotation is used to export the PreHeader class as a top-level object in the generated JavaScript code, making it accessible from outside the Scala.js environment.\n\n3. Why are some of the properties defined as js.BigInt instead of regular BigInt?\n   The js.BigInt type is used to represent BigInt values in the JavaScript environment, which is necessary when interacting with JavaScript code or libraries that expect or return BigInt values."
                },
                {
                  "fileName": "Prover.scala",
                  "filePath": "sdk/js/src/main/scala/org/ergoplatform/sdk/js/Prover.scala",
                  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/sdk/js/src/main/scala/org/ergoplatform/sdk/js/Prover.scala",
                  "summary": "The code defines a class called `Prover` that provides methods for reducing transactions in the Ergo blockchain. The `Prover` class takes an instance of the `sdk.Prover` class as a parameter and exposes two methods: `reduce` and `reduceTransaction`.\n\nThe `reduce` method takes four parameters: `stateCtx`, `unsignedTx`, `boxesToSpend`, and `baseCost`. `stateCtx` is an instance of the `BlockchainStateContext` class, `unsignedTx` is an instance of the `transactionsMod.UnsignedTransaction` class, `boxesToSpend` is an array of `inputsMod.EIP12UnsignedInput` instances, and `baseCost` is an integer. The method first creates an instance of the `sdk.UnreducedTransaction` class using the `unsignedTx`, `boxesToSpend`, and empty `dataInputs` and `tokensToBurn` arrays. It then calls the `reduce` method of the `_prover` instance with the `stateCtx`, `tx`, and `baseCost` parameters. Finally, it returns a new instance of the `ReducedTransaction` class.\n\nThe `reduceTransaction` method takes six parameters: `unsignedTx`, `boxesToSpend`, `dataBoxes`, `stateDigest`, `baseCost`, and `tokensToBurn`. `unsignedTx` and `boxesToSpend` are the same as in the `reduce` method. `dataBoxes` is an array of `Box[commonMod.Amount]` instances, `stateDigest` is a string, and `tokensToBurn` is an array of `tokenMod.TokenAmount[commonMod.Amount]` instances. The method creates an instance of the `sdk.UnreducedTransaction` class using the `unsignedTx`, `boxesToSpend`, `dataBoxes`, and `tokensToBurn` parameters. It then returns a tuple containing a new instance of the `ReducedTransaction` class and an integer value of 0.\n\nThe purpose of this code is to provide a way to reduce transactions in the Ergo blockchain using an instance of the `sdk.Prover` class. The `reduce` and `reduceTransaction` methods take different sets of parameters and can be used in different contexts depending on the needs of the larger project. For example, the `reduce` method may be used to reduce a transaction before it is broadcast to the network, while the `reduceTransaction` method may be used to reduce a transaction that has already been broadcast and is waiting to be included in a block.",
                  "questions": "1. What is the purpose of the `Prover` class and its methods?\n- The `Prover` class is a wrapper around the `sdk.Prover` class and provides two methods for reducing transactions. The `reduce` method takes in a `BlockchainStateContext`, an `UnsignedTransaction`, an array of `EIP12UnsignedInput` boxes to spend, and a base cost, and returns a `ReducedTransaction`. The `reduceTransaction` method takes in similar parameters as `reduce`, as well as an array of data boxes and an array of tokens to burn, and returns a tuple of a `ReducedTransaction` and an integer.\n \n2. What is the purpose of the `ReducedTransaction` class?\n- The `ReducedTransaction` class is a placeholder class that does not have any functionality or properties. It is used as a return type for the `reduce` and `reduceTransaction` methods in the `Prover` class.\n\n3. What external dependencies does this code have?\n- This code has external dependencies on the `org.ergoplatform.sdk` package, the `typings.fleetSdkCommon` package (specifically the `boxesMod`, `commonMod`, `inputsMod`, `tokenMod`, and `transactionsMod` modules), and the `scala.scalajs.js` package."
                },
                {
                  "fileName": "ProverBuilder.scala",
                  "filePath": "sdk/js/src/main/scala/org/ergoplatform/sdk/js/ProverBuilder.scala",
                  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/sdk/js/src/main/scala/org/ergoplatform/sdk/js/ProverBuilder.scala",
                  "summary": "The code above defines a class called `ProverBuilder` that is used to build a prover object for the Ergo blockchain platform. The `ProverBuilder` class takes two arguments: `parameters` of type `ErgoLikeParameters` and `networkPrefix` of type `NetworkPrefix`. The `ErgoLikeParameters` class is used to define the parameters of an Ergo transaction, while the `NetworkPrefix` class is used to specify the network prefix of the Ergo blockchain (either `Mainnet` or `Testnet`).\n\nThe `ProverBuilder` class has several methods that can be used to configure the prover object. The `withMnemonic` method takes two arguments: `mnemonicPhrase` and `mnemonicPass`, both of type `String`. These arguments are used to generate a secret key for the prover object. The `withEip3Secret` method takes an integer argument `index` and is used to add an EIP3 secret to the prover object. The `withDHTData` method takes five arguments: `g`, `h`, `u`, `v`, and `x`, where `g`, `h`, `u`, and `v` are group elements and `x` is a big integer. This method is used to add DHT data to the prover object. Finally, the `withDLogSecret` method takes a big integer argument `x` and is used to add a DLog secret to the prover object.\n\nOnce the prover object has been configured using the `ProverBuilder` class, the `build` method can be called to create a new `Prover` object. The `Prover` class is not defined in this file, but it is likely defined elsewhere in the project.\n\nThis code is likely used in a larger project that involves building and signing Ergo transactions. The `ProverBuilder` class provides a convenient way to configure a prover object with the necessary secrets and data to sign a transaction. The resulting `Prover` object can then be used to sign a transaction and submit it to the Ergo blockchain. An example usage of this code might look like:\n\n```\nval parameters = new ErgoLikeParameters(...)\nval networkPrefix = NetworkPrefix.Testnet\nval builder = new ProverBuilder(parameters, networkPrefix)\nbuilder.withMnemonic(\"my secret phrase\", \"my password\")\nbuilder.withDLogSecret(1234567890)\nval prover = builder.build()\nval signedTx = prover.sign(tx)\n```",
                  "questions": "1. What is the purpose of this code and what does it do?\n   - This code defines a class called `ProverBuilder` in the `org.ergoplatform.sdk.js` package that provides methods for building a prover object for the Ergo blockchain platform. It uses various dependencies and libraries to construct the prover object with different types of secret keys and data.\n\n2. What are the parameters required to instantiate an object of the `ProverBuilder` class?\n   - An object of the `ProverBuilder` class requires two parameters: an `ErgoLikeParameters` object and a `NetworkPrefix` object. These parameters are used to initialize the `_builder` object of the `sdk.ProverBuilder` class, which is used to construct the prover object.\n\n3. What are some of the methods available in the `ProverBuilder` class and what do they do?\n   - The `ProverBuilder` class provides several methods for adding different types of secret keys and data to the prover object, such as `withMnemonic`, `withEip3Secret`, `withDHTData`, and `withDLogSecret`. These methods take different parameters and use various functions to convert data types and formats to the required format for the prover object. The `build` method is used to construct the final `Prover` object from the `_builder` object."
                },
                {
                  "fileName": "Type.scala",
                  "filePath": "sdk/js/src/main/scala/org/ergoplatform/sdk/js/Type.scala",
                  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/sdk/js/src/main/scala/org/ergoplatform/sdk/js/Type.scala",
                  "summary": "The code above defines a set of classes and methods that represent ErgoScript types in a JavaScript-friendly way. The `Type` class is a wrapper around the `RType` type descriptor, which is used to represent types in the ErgoScript language. The `Type` class has a single field, `rtype`, which is the underlying `RType` descriptor. \n\nThe `Type` class has a method called `name`, which returns the syntactically correct type name as a string. There is also an overridden `toString` method that returns a string representation of the `Type` object.\n\nThe `Types` object defines a set of static fields and methods that represent common ErgoScript types. These include `Byte`, `Short`, `Int`, and `Long`, which are descriptors for the corresponding primitive types in ErgoScript. There are also two methods, `pairType` and `collType`, which construct descriptors for pair and collection types, respectively.\n\nThe `pairType` method takes two `Type` objects as arguments and returns a new `Type` object that represents a pair of those types. The `collType` method takes a single `Type` object as an argument and returns a new `Type` object that represents a collection of elements of that type.\n\nOverall, this code provides a way to represent ErgoScript types in a JavaScript-friendly way, which can be useful when working with ErgoScript in a JavaScript environment. The `Types` object provides a set of common type descriptors that can be used to construct more complex types. For example, to represent a collection of pairs of integers, one could use the following code:\n\n```\nval pairType = Type.pairType(Type.Int, Type.Int)\nval collType = Type.collType(pairType)\n```",
                  "questions": "1. What is the purpose of this code?\n- This code defines a set of classes and methods for representing and manipulating ErgoScript types in a JavaScript-friendly way.\n\n2. What is the difference between the `Type` class and the `Types` object?\n- The `Type` class represents a single ErgoScript type, while the `Types` object provides methods for constructing and accessing different types.\n\n3. What is the `collType` method used for?\n- The `collType` method constructs a new descriptor of an ErgoScript collection type, where `elemType` is the type descriptor of the collection elements."
                },
                {
                  "fileName": "Value.scala",
                  "filePath": "sdk/js/src/main/scala/org/ergoplatform/sdk/js/Value.scala",
                  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/sdk/js/src/main/scala/org/ergoplatform/sdk/js/Value.scala",
                  "summary": "# Code Explanation: org.ergoplatform.sdk.js\n\nThe `org.ergoplatform.sdk.js` package contains the implementation of the ErgoScript language in JavaScript. The `Value` class is used to represent any valid value of the ErgoScript language. Each `Value` instance comes equipped with a `Type` descriptor. The `Value` class is implemented based on the pre-defined mapping between JavaScript and ErgoScript types. This mapping is applied recursively and is given by the following:\n\n| JS type | ErgoScript Type |\n| -------| ---------------|\n| Number | Byte |\n| Number | Short |\n| Number | Int |\n| BigInt | Long |\n| BigInt | BigInt |\n| array [A, B] | (A, B) - pair |\n| array [a1, a2 ..] | Coll[A] - collection |\n\nThe `Value` class has two properties: `data` and `tpe`. The `data` property is the JavaScript value wrapped in this `Value` instance. The `tpe` property is the type descriptor of the ErgoScript type. \n\nThe `Value` class has two methods: `runtimeData` and `toHex()`. The `runtimeData` method returns the Sigma runtime value which can be passed to the interpreter, saved in the register, and `sigmastate.Values.Constant` nodes. The `toHex()` method encodes this `Value` instance as a Base16 hex string. \n\nThe `Values` object contains helper methods to create `Value` instances from JavaScript values. The `ofByte()`, `ofShort()`, `ofInt()`, and `ofLong()` methods create `Value` instances from JavaScript numbers. The `pairOf()` method creates a `Value` instance from two `Value` instances. The `collOf()` method creates a `Value` instance from an array of elements and an element type descriptor. The `fromHex()` method creates a `Value` instance from a hex-encoded serialized bytes of `Constant` values. \n\nOverall, the `Value` class and `Values` object are essential components of the ErgoScript language implementation in JavaScript. They allow for the representation of ErgoScript values in JavaScript and provide methods to encode and decode these values.",
                  "questions": "1. What is the purpose of the `Value` class and how is it used in ErgoScript language?\n- The `Value` class is used to represent any valid value of ErgoScript language and comes equipped with a `Type` descriptor. It is used to create Sigma runtime values which can be passed to interpreter, saved in register and `Constant` nodes.\n2. What is the mapping between JS types and ErgoScript types?\n- The mapping between JS types and ErgoScript types is as follows:\n  - Number -> Byte, Short, Int\n  - BigInt -> Long, BigInt\n  - array [A, B] -> (A, B) - pair\n  - array [a1, a2 ..] -> Coll[A] - collection\n3. How is a `Value` encoded as a Base16 hex string?\n- A `Value` is encoded as a Base16 hex string by transforming it into a `ConstantNode` of Sigma, serializing the constant into a byte array using `ConstantSerializer`, and then encoding the bytes using Base16 encoder into a string."
                }
              ],
              "folders": [],
              "summary": "The `.autodoc/docs/json/sdk/js/src/main/scala/org/ergoplatform/sdk/js` folder contains Scala.js implementations for various Ergo blockchain platform components, such as transaction processing, block headers, and ErgoScript types. These implementations are designed to be used in a JavaScript environment, enabling seamless integration with JavaScript applications.\n\nFor example, the `BlockchainParameters.scala` file defines a class representing the parameters of a blockchain network, such as maximum block size and transaction costs. This class can be used to configure the blockchain network parameters in a JavaScript environment:\n\n```javascript\nconst params = new BlockchainParameters(...);\nconst maxBlockSize = params.maxBlockSize;\n```\n\nThe `BlockchainStateContext.scala` file defines a class representing the current state of the blockchain, including recent block headers and the previous state digest. This class can be used to access and manipulate the blockchain state:\n\n```javascript\nconst context = new BlockchainStateContext(headers, previousDigest, preHeader);\nconsole.log(context.sigmaLastHeaders);\n```\n\nThe `ErgoTree.scala` file provides a way to convert ErgoTree objects, which represent smart contracts, to and from bytes and hexadecimal strings. This is useful for creating and executing smart contracts on the Ergo blockchain platform:\n\n```javascript\nconst ergoTree = ErgoTrees.fromHex(hexString);\nconst ergoTreeBytes = ergoTree.toBytes();\n```\n\nThe `Header.scala` file defines classes for representing and manipulating AVL trees and block headers in the Ergo blockchain. These classes can be used to perform various operations on the data they represent:\n\n```javascript\nconst header = new Header(...);\nconst avlTree = new AvlTree(...);\n```\n\nThe `ProverBuilder.scala` file provides a way to configure a prover object with the necessary secrets and data to sign a transaction. The resulting `Prover` object can then be used to sign a transaction and submit it to the Ergo blockchain:\n\n```javascript\nconst builder = new ProverBuilder(parameters, networkPrefix);\nbuilder.withMnemonic(\"my secret phrase\", \"my password\");\nconst prover = builder.build();\nconst signedTx = prover.sign(tx);\n```\n\nThe `Type.scala` and `Value.scala` files provide a way to represent ErgoScript types and values in a JavaScript-friendly way, which can be useful when working with ErgoScript in a JavaScript environment:\n\n```javascript\nconst intValue = Values.ofInt(42);\nconst pairValue = Values.pairOf(intValue, intValue);\nconst collValue = Values.collOf([intValue, intValue], Type.Int);\n```\n\nOverall, this folder contains essential components for working with the Ergo blockchain platform in a JavaScript environment, enabling developers to build and interact with ErgoScript applications seamlessly.",
              "questions": ""
            }
          ],
          "summary": "The `.autodoc/docs/json/sdk/js/src/main/scala/org/ergoplatform/sdk/js` folder contains Scala.js implementations for various Ergo blockchain platform components, such as transaction processing, block headers, and ErgoScript types. These implementations are designed to be used in a JavaScript environment, enabling seamless integration with JavaScript applications.\n\nFor example, the `BlockchainParameters.scala` file defines a class representing the parameters of a blockchain network, such as maximum block size and transaction costs. This class can be used to configure the blockchain network parameters in a JavaScript environment:\n\n```javascript\nconst params = new BlockchainParameters(...);\nconst maxBlockSize = params.maxBlockSize;\n```\n\nThe `BlockchainStateContext.scala` file defines a class representing the current state of the blockchain, including recent block headers and the previous state digest. This class can be used to access and manipulate the blockchain state:\n\n```javascript\nconst context = new BlockchainStateContext(headers, previousDigest, preHeader);\nconsole.log(context.sigmaLastHeaders);\n```\n\nThe `ErgoTree.scala` file provides a way to convert ErgoTree objects, which represent smart contracts, to and from bytes and hexadecimal strings. This is useful for creating and executing smart contracts on the Ergo blockchain platform:\n\n```javascript\nconst ergoTree = ErgoTrees.fromHex(hexString);\nconst ergoTreeBytes = ergoTree.toBytes();\n```\n\nThe `Header.scala` file defines classes for representing and manipulating AVL trees and block headers in the Ergo blockchain. These classes can be used to perform various operations on the data they represent:\n\n```javascript\nconst header = new Header(...);\nconst avlTree = new AvlTree(...);\n```\n\nThe `ProverBuilder.scala` file provides a way to configure a prover object with the necessary secrets and data to sign a transaction. The resulting `Prover` object can then be used to sign a transaction and submit it to the Ergo blockchain:\n\n```javascript\nconst builder = new ProverBuilder(parameters, networkPrefix);\nbuilder.withMnemonic(\"my secret phrase\", \"my password\");\nconst prover = builder.build();\nconst signedTx = prover.sign(tx);\n```\n\nThe `Type.scala` and `Value.scala` files provide a way to represent ErgoScript types and values in a JavaScript-friendly way, which can be useful when working with ErgoScript in a JavaScript environment:\n\n```javascript\nconst intValue = Values.ofInt(42);\nconst pairValue = Values.pairOf(intValue, intValue);\nconst collValue = Values.collOf([intValue, intValue], Type.Int);\n```\n\nOverall, this folder contains essential components for working with the Ergo blockchain platform in a JavaScript environment, enabling developers to build and interact with ErgoScript applications seamlessly.",
          "questions": ""
        }
      ],
      "summary": "The `.autodoc/docs/json/sdk/js/src/main/scala/org/ergoplatform/sdk/js` folder contains Scala.js implementations for various Ergo blockchain platform components, such as transaction processing, block headers, and ErgoScript types. These implementations are designed to be used in a JavaScript environment, enabling seamless integration with JavaScript applications.\n\nFor example, the `BlockchainParameters.scala` file defines a class representing the parameters of a blockchain network, such as maximum block size and transaction costs. This class can be used to configure the blockchain network parameters in a JavaScript environment:\n\n```javascript\nconst params = new BlockchainParameters(...);\nconst maxBlockSize = params.maxBlockSize;\n```\n\nThe `BlockchainStateContext.scala` file defines a class representing the current state of the blockchain, including recent block headers and the previous state digest. This class can be used to access and manipulate the blockchain state:\n\n```javascript\nconst context = new BlockchainStateContext(headers, previousDigest, preHeader);\nconsole.log(context.sigmaLastHeaders);\n```\n\nThe `ErgoTree.scala` file provides a way to convert ErgoTree objects, which represent smart contracts, to and from bytes and hexadecimal strings. This is useful for creating and executing smart contracts on the Ergo blockchain platform:\n\n```javascript\nconst ergoTree = ErgoTrees.fromHex(hexString);\nconst ergoTreeBytes = ergoTree.toBytes();\n```\n\nThe `Header.scala` file defines classes for representing and manipulating AVL trees and block headers in the Ergo blockchain. These classes can be used to perform various operations on the data they represent:\n\n```javascript\nconst header = new Header(...);\nconst avlTree = new AvlTree(...);\n```\n\nThe `ProverBuilder.scala` file provides a way to configure a prover object with the necessary secrets and data to sign a transaction. The resulting `Prover` object can then be used to sign a transaction and submit it to the Ergo blockchain:\n\n```javascript\nconst builder = new ProverBuilder(parameters, networkPrefix);\nbuilder.withMnemonic(\"my secret phrase\", \"my password\");\nconst prover = builder.build();\nconst signedTx = prover.sign(tx);\n```\n\nThe `Type.scala` and `Value.scala` files provide a way to represent ErgoScript types and values in a JavaScript-friendly way, which can be useful when working with ErgoScript in a JavaScript environment:\n\n```javascript\nconst intValue = Values.ofInt(42);\nconst pairValue = Values.pairOf(intValue, intValue);\nconst collValue = Values.collOf([intValue, intValue], Type.Int);\n```\n\nOverall, this folder contains essential components for working with the Ergo blockchain platform in a JavaScript environment, enabling developers to build and interact with ErgoScript applications seamlessly.",
      "questions": ""
    }
  ],
  "summary": "The `.autodoc/docs/json/sdk/js/src/main/scala/org/ergoplatform/sdk/js` folder contains Scala.js implementations for various Ergo blockchain platform components, such as transaction processing, block headers, and ErgoScript types. These implementations are designed to be used in a JavaScript environment, enabling seamless integration with JavaScript applications.\n\nFor example, the `BlockchainParameters.scala` file defines a class representing the parameters of a blockchain network, such as maximum block size and transaction costs. This class can be used to configure the blockchain network parameters in a JavaScript environment:\n\n```javascript\nconst params = new BlockchainParameters(...);\nconst maxBlockSize = params.maxBlockSize;\n```\n\nThe `BlockchainStateContext.scala` file defines a class representing the current state of the blockchain, including recent block headers and the previous state digest. This class can be used to access and manipulate the blockchain state:\n\n```javascript\nconst context = new BlockchainStateContext(headers, previousDigest, preHeader);\nconsole.log(context.sigmaLastHeaders);\n```\n\nThe `ErgoTree.scala` file provides a way to convert ErgoTree objects, which represent smart contracts, to and from bytes and hexadecimal strings. This is useful for creating and executing smart contracts on the Ergo blockchain platform:\n\n```javascript\nconst ergoTree = ErgoTrees.fromHex(hexString);\nconst ergoTreeBytes = ergoTree.toBytes();\n```\n\nThe `Header.scala` file defines classes for representing and manipulating AVL trees and block headers in the Ergo blockchain. These classes can be used to perform various operations on the data they represent:\n\n```javascript\nconst header = new Header(...);\nconst avlTree = new AvlTree(...);\n```\n\nThe `ProverBuilder.scala` file provides a way to configure a prover object with the necessary secrets and data to sign a transaction. The resulting `Prover` object can then be used to sign a transaction and submit it to the Ergo blockchain:\n\n```javascript\nconst builder = new ProverBuilder(parameters, networkPrefix);\nbuilder.withMnemonic(\"my secret phrase\", \"my password\");\nconst prover = builder.build();\nconst signedTx = prover.sign(tx);\n```\n\nThe `Type.scala` and `Value.scala` files provide a way to represent ErgoScript types and values in a JavaScript-friendly way, which can be useful when working with ErgoScript in a JavaScript environment:\n\n```javascript\nconst intValue = Values.ofInt(42);\nconst pairValue = Values.pairOf(intValue, intValue);\nconst collValue = Values.collOf([intValue, intValue], Type.Int);\n```\n\nOverall, this folder contains essential components for working with the Ergo blockchain platform in a JavaScript environment, enabling developers to build and interact with ErgoScript applications seamlessly.",
  "questions": ""
}