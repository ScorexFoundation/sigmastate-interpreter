{
  "folderName": "settings",
  "folderPath": ".autodoc/docs/json/sdk/shared/src/main/scala/org/ergoplatform/sdk/wallet/settings",
  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/.autodoc/docs/json/sdk/shared/src/main/scala/org/ergoplatform/sdk/wallet/settings",
  "files": [
    {
      "fileName": "EncryptionSettings.scala",
      "filePath": "sdk/shared/src/main/scala/org/ergoplatform/sdk/wallet/settings/EncryptionSettings.scala",
      "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/sdk/shared/src/main/scala/org/ergoplatform/sdk/wallet/settings/EncryptionSettings.scala",
      "summary": "The code above defines a Scala package called `org.ergoplatform.sdk.wallet.settings` that contains a case class called `EncryptionSettings` and two implicit objects that implement the `Encoder` and `Decoder` traits from the `io.circe` library. \n\nThe `EncryptionSettings` case class has three parameters: `prf`, `c`, and `dkLen`. These parameters are used to define the encryption parameters for a password-based key derivation function (PBKDF2). The `prf` parameter is a string that represents the pseudo-random function used by the PBKDF2 algorithm. The `c` parameter is an integer that represents the number of iterations used by the PBKDF2 algorithm. The `dkLen` parameter is an integer that represents the desired bit-length of the derived key.\n\nThe `EncryptionSettingsEncoder` object implements the `Encoder` trait for the `EncryptionSettings` case class. This object defines a `apply` method that takes an instance of `EncryptionSettings` and returns a JSON object that represents the instance. The JSON object has three fields: `prf`, `c`, and `dkLen`. The values of these fields are obtained from the corresponding parameters of the `EncryptionSettings` instance.\n\nThe `EncryptionSettingsDecoder` object implements the `Decoder` trait for the `EncryptionSettings` case class. This object defines an `apply` method that takes a `HCursor` instance and returns a `Decoder.Result` instance that represents the `EncryptionSettings` instance. The `HCursor` instance is used to navigate the JSON object that represents the `EncryptionSettings` instance. The `as` method is used to extract the values of the `prf`, `c`, and `dkLen` fields from the JSON object. These values are then used to create a new instance of the `EncryptionSettings` case class.\n\nThis code is used to define the encryption parameters for the PBKDF2 algorithm used by the larger project. The `EncryptionSettings` case class can be used to create instances of the encryption parameters, and the `EncryptionSettingsEncoder` and `EncryptionSettingsDecoder` objects can be used to convert instances of the `EncryptionSettings` case class to and from JSON format. This allows the encryption parameters to be stored and retrieved from a file or database. \n\nExample usage:\n\n```scala\nval encryptionSettings = EncryptionSettings(\"HmacSHA256\", 10000, 256)\nval json = encryptionSettings.asJson\nval jsonString = json.noSpaces\n// Store jsonString in a file or database\n\n// Retrieve jsonString from a file or database\nval json = parser.parse(jsonString).getOrElse(Json.Null)\nval encryptionSettings = json.as[EncryptionSettings].getOrElse(throw new Exception(\"Invalid JSON\"))\n```",
      "questions": "1. What is the purpose of the `EncryptionSettings` class?\n- The `EncryptionSettings` class represents encryption parameters, including the pseudo-random function, number of PBKDF2 iterations, and desired bit-length of the derived key.\n\n2. What is the purpose of the `EncryptionSettingsEncoder` and `EncryptionSettingsDecoder` objects?\n- The `EncryptionSettingsEncoder` object provides a way to encode `EncryptionSettings` objects as JSON, while the `EncryptionSettingsDecoder` object provides a way to decode JSON into `EncryptionSettings` objects.\n\n3. Why is the `cats.syntax.either._` import needed?\n- The `cats.syntax.either._` import is needed for compatibility with Scala 2.11."
    }
  ],
  "folders": [],
  "summary": "The `EncryptionSettings.scala` file is part of the `org.ergoplatform.sdk.wallet.settings` package and provides a case class and JSON encoding/decoding functionality for encryption settings used in the PBKDF2 algorithm. The main purpose of this code is to define the encryption parameters, store them in a JSON format, and retrieve them when needed.\n\nThe `EncryptionSettings` case class has three parameters:\n\n- `prf`: A string representing the pseudo-random function used by the PBKDF2 algorithm.\n- `c`: An integer representing the number of iterations used by the PBKDF2 algorithm.\n- `dkLen`: An integer representing the desired bit-length of the derived key.\n\nThe `EncryptionSettingsEncoder` object implements the `Encoder` trait for the `EncryptionSettings` case class. It defines an `apply` method that takes an instance of `EncryptionSettings` and returns a JSON object representing the instance. The JSON object has three fields: `prf`, `c`, and `dkLen`, with values obtained from the corresponding parameters of the `EncryptionSettings` instance.\n\nThe `EncryptionSettingsDecoder` object implements the `Decoder` trait for the `EncryptionSettings` case class. It defines an `apply` method that takes a `HCursor` instance and returns a `Decoder.Result` instance representing the `EncryptionSettings` instance. The `HCursor` instance is used to navigate the JSON object representing the `EncryptionSettings` instance, and the `as` method extracts the values of the `prf`, `c`, and `dkLen` fields from the JSON object. These values are then used to create a new instance of the `EncryptionSettings` case class.\n\nThis code can be used in the larger project to define encryption parameters for the PBKDF2 algorithm, store them in a JSON format, and retrieve them when needed. This allows the encryption parameters to be stored and retrieved from a file or database.\n\nExample usage:\n\n```scala\nval encryptionSettings = EncryptionSettings(\"HmacSHA256\", 10000, 256)\nval json = encryptionSettings.asJson\nval jsonString = json.noSpaces\n// Store jsonString in a file or database\n\n// Retrieve jsonString from a file or database\nval json = parser.parse(jsonString).getOrElse(Json.Null)\nval encryptionSettings = json.as[EncryptionSettings].getOrElse(throw new Exception(\"Invalid JSON\"))\n```\n\nIn summary, the `EncryptionSettings.scala` file provides a case class and JSON encoding/decoding functionality for encryption settings used in the PBKDF2 algorithm. This allows the larger project to store and retrieve encryption parameters in a JSON format, making it easier to manage and maintain the encryption settings.",
  "questions": ""
}