{
  "fileName": "Extensions.scala",
  "filePath": "common/shared/src/main/scala/scalan/util/Extensions.scala",
  "url": "sigmastate-interpreterhttps://github.com/ScorexFoundation/sigmastate-interpreter/common/shared/src/main/scala/scalan/util/Extensions.scala",
  "summary": "The code in this file provides a set of implicit classes and methods that extend the functionality of built-in Scala types. These extensions include methods for converting between numeric types, performing arithmetic operations with overflow checking, and converting boolean values to bytes. \n\nOne notable method is `to256BitValueExact`, which checks whether a given `BigInteger` can be represented as a 256-bit two's-complement value. This method is used in deserialization to ensure that a `BigInteger` value can be safely converted to a fixed-size byte array without losing information. \n\nThe code also includes an implicit class called `Ensuring`, which provides a way to add runtime assertions to any value. The `ensuring` method takes a condition and an error message, and throws an exception if the condition is not met. This can be useful for enforcing invariants or validating input parameters. \n\nOverall, this code provides a set of utility functions that can be used throughout a larger project to extend the functionality of built-in types and perform common operations with additional safety checks. \n\nExample usage:\n\n```scala\nimport scalan.util.Extensions._\n\nval x: Int = 100\nval y: Short = 200\nval z: Byte = 1\n\n// Convert between numeric types\nval xByte: Byte = x.toByteExact\nval yInt: Int = y.toIntExact\nval zShort: Short = z.toShortExact\n\n// Perform arithmetic operations with overflow checking\nval sum: Byte = z.addExact(xByte)\nval diff: Short = y.subtractExact(xByte)\nval prod: Byte = z.multiplyExact(xByte)\n\n// Convert boolean values to bytes\nval trueByte: Byte = true.toByte\nval falseByte: Byte = false.toByte\n\n// Add runtime assertions to a value\nval result = x + y + z\nresult.ensuring(_ > 0, _ => s\"Result should be positive but was $result\")\n```",
  "questions": "1. What is the purpose of the `Extensions` object and its implicit classes?\n- The `Extensions` object contains implicit classes that provide additional functionality to primitive types such as `Byte`, `Short`, `Int`, `Long`, `Boolean`, and `BigInteger`.\n2. What is the purpose of the `toUByte` method?\n- The `toUByte` method is used to convert a signed byte to an unsigned byte by masking the byte with `0xFF`.\n3. What is the purpose of the `to256BitValueExact` method?\n- The `to256BitValueExact` method checks if a `BigInteger` can be represented as a 256-bit two's-complement value and returns the value if it can, otherwise it throws an `ArithmeticException`."
}